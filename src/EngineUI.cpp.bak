#include "EngineUI.h"
#include <iostream>
#include <filesystem>
#include <imgui.h>
#include <imgui_internal.h>

EngineUI::EngineUI()
{
    InitializeSceneHierarchy();
}

EngineUI::~EngineUI() {}

void EngineUI::InitializeSceneHierarchy()
{
    // Create root node
    rootNode = std::make_shared<SceneNode>("Scene", NodeType::Root);
    rootNode->expanded = true;

    // Add some example nodes
    auto node2D = std::make_shared<SceneNode>("Node2D", NodeType::Node2D);
    rootNode->children.push_back(node2D);

    auto characterBody = std::make_shared<SceneNode>("CharacterBody2D", NodeType::CharacterBody2D);
    node2D->children.push_back(characterBody);

    auto sprite = std::make_shared<SceneNode>("Sprite", NodeType::Sprite);
    characterBody->children.push_back(sprite);

    auto camera = std::make_shared<SceneNode>("Camera2D", NodeType::Camera);
    rootNode->children.push_back(camera);

    auto ui = std::make_shared<SceneNode>("UI", NodeType::Node2D);
    rootNode->children.push_back(ui);

    auto label = std::make_shared<SceneNode>("Label", NodeType::Label);
    ui->children.push_back(label);

    auto button = std::make_shared<SceneNode>("Button", NodeType::Button);
    ui->children.push_back(button);
}

bool EngineUI::Init()
{
    // Load fonts and setup theme
    if (!LoadFonts())
    {
        std::cerr << "Failed to load fonts" << std::endl;
        return false;
    }

    SetupTheme();
    return true;
}

bool EngineUI::LoadFonts()
{
    ImGuiIO &io = ImGui::GetIO();

    // Load Nunito Sans font
    std::string fontPath = "fonts/Nunito_Sans/NunitoSans-VariableFont_YTLC,opsz,wdth,wght.ttf";

    // Regular font (14px)
    mainFont = io.Fonts->AddFontFromFileTTF(fontPath.c_str(), 14.0f);
    if (mainFont == nullptr)
    {
        std::cerr << "Failed to load main font" << std::endl;
        return false;
    }

    // Bold font (15px) - using a slightly larger size to simulate bold
    boldFont = io.Fonts->AddFontFromFileTTF(fontPath.c_str(), 15.0f);

    // Title font (18px)
    titleFont = io.Fonts->AddFontFromFileTTF(fontPath.c_str(), 18.0f);

    // Load Font Awesome for icons
    static const ImWchar icons_ranges[] = {0xf000, 0xf999, 0}; // Font Awesome 5 ranges
    ImFontConfig icons_config;
    icons_config.MergeMode = false;
    icons_config.PixelSnapH = true;
    icons_config.GlyphMinAdvanceX = 14.0f;
    icons_config.GlyphOffset = ImVec2(0, 0);

    std::string iconFontPath = "fonts/FontAwesome/fa-solid-900.ttf";
    iconFont = io.Fonts->AddFontFromFileTTF(iconFontPath.c_str(), 14.0f, &icons_config, icons_ranges);
    if (iconFont == nullptr)
    {
        std::cerr << "Failed to load icon font" << std::endl;
        // Continue anyway, we'll just have no icons
    }

    // Setup icon mappings
    SetupIcons();

    return true;
}

void EngineUI::SetupIcons()
{
    // Map node types to Font Awesome icons
    // These are Unicode values for Font Awesome 5 icons
    nodeIcons[NodeType::Root] = "\xef\x81\x80";            // fa-sitemap
    nodeIcons[NodeType::Node2D] = "\xef\x87\xb8";          // fa-object-group
    nodeIcons[NodeType::Sprite] = "\xef\x83\x87";          // fa-image
    nodeIcons[NodeType::CharacterBody2D] = "\xef\x86\x8e"; // fa-user
    nodeIcons[NodeType::Camera] = "\xef\x80\xbd";          // fa-camera
    nodeIcons[NodeType::Light] = "\xef\x83\x85";           // fa-lightbulb
    nodeIcons[NodeType::Label] = "\xef\x81\x9e";           // fa-font
    nodeIcons[NodeType::Button] = "\xef\x89\x96";          // fa-square
    nodeIcons[NodeType::Panel] = "\xef\x84\xa6";           // fa-window-maximize
}

const char *EngineUI::GetNodeIcon(NodeType type)
{
    auto it = nodeIcons.find(type);
    if (it != nodeIcons.end())
    {
        return it->second;
    }
    return "\xef\x81\x90"; // fa-question-circle as fallback
}

void EngineUI::SetupTheme()
{
    // Godot-like dark theme
    ImGuiStyle &style = ImGui::GetStyle();

    // Colors based on Godot's dark theme
    ImVec4 *colors = style.Colors;
    colors[ImGuiCol_WindowBg] = ImVec4(0.15f, 0.15f, 0.15f, 1.00f);
    colors[ImGuiCol_ChildBg] = ImVec4(0.18f, 0.18f, 0.18f, 1.00f);
    colors[ImGuiCol_PopupBg] = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);
    colors[ImGuiCol_Border] = ImVec4(0.08f, 0.08f, 0.08f, 0.50f);
    colors[ImGuiCol_FrameBg] = ImVec4(0.20f, 0.20f, 0.20f, 0.54f);
    colors[ImGuiCol_FrameBgHovered] = ImVec4(0.37f, 0.37f, 0.37f, 0.40f);
    colors[ImGuiCol_FrameBgActive] = ImVec4(0.39f, 0.39f, 0.39f, 0.67f);
    colors[ImGuiCol_TitleBg] = ImVec4(0.09f, 0.09f, 0.09f, 1.00f);
    colors[ImGuiCol_TitleBgActive] = ImVec4(0.12f, 0.12f, 0.12f, 1.00f);
    colors[ImGuiCol_MenuBarBg] = ImVec4(0.16f, 0.16f, 0.16f, 1.00f);
    colors[ImGuiCol_ScrollbarBg] = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);
    colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);
    colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);
    colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
    colors[ImGuiCol_CheckMark] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
    colors[ImGuiCol_SliderGrab] = ImVec4(0.24f, 0.52f, 0.88f, 1.00f);
    colors[ImGuiCol_SliderGrabActive] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
    colors[ImGuiCol_Button] = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);
    colors[ImGuiCol_ButtonHovered] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
    colors[ImGuiCol_ButtonActive] = ImVec4(0.06f, 0.53f, 0.98f, 1.00f);
    colors[ImGuiCol_Header] = ImVec4(0.26f, 0.59f, 0.98f, 0.31f);
    colors[ImGuiCol_HeaderHovered] = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);
    colors[ImGuiCol_HeaderActive] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
    colors[ImGuiCol_Tab] = ImVec4(0.18f, 0.18f, 0.18f, 1.00f);
    colors[ImGuiCol_TabHovered] = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);
    colors[ImGuiCol_TabActive] = ImVec4(0.20f, 0.41f, 0.68f, 1.00f);

    // Adjust style
    style.WindowRounding = 0.0f;
    style.ChildRounding = 0.0f;
    style.FrameRounding = 3.0f;
    style.GrabRounding = 3.0f;
    style.PopupRounding = 3.0f;
    style.ScrollbarRounding = 3.0f;
    style.TabRounding = 3.0f;
    style.WindowPadding = ImVec2(8, 8);
    style.FramePadding = ImVec2(5, 3);
    style.ItemSpacing = ImVec2(6, 6);
    style.ItemInnerSpacing = ImVec2(3, 3);
    style.TouchExtraPadding = ImVec2(0, 0);
    style.IndentSpacing = 21.0f;
    style.ScrollbarSize = 14.0f;
    style.GrabMinSize = 10.0f;
}

void EngineUI::Render()
{
    // Set the main font for the UI
    ImGui::PushFont(mainFont);

    // Begin the main dockspace
    ImGuiViewport *viewport = ImGui::GetMainViewport();
    ImGui::SetNextWindowPos(viewport->Pos);
    ImGui::SetNextWindowSize(viewport->Size);
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_MenuBar;
    window_flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
    window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus;

    ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
    ImGui::Begin("DockSpace", nullptr, window_flags);
    ImGui::PopStyleVar(3);

    // Render the top bar
    RenderTopBar();

    // Calculate content area (below top bar)
    float topBarHeight = ImGui::GetFrameHeight();
    ImVec2 contentPos = ImVec2(0, topBarHeight);
    ImVec2 contentSize = ImVec2(viewport->Size.x, viewport->Size.y - topBarHeight);

    // Create the three-panel layout with resizable columns
    ImGui::SetCursorPos(contentPos);

    // Left panel (Scene Hierarchy)
    ImGui::BeginChild("LeftPanel", ImVec2(leftPanelWidth, contentSize.y), true);
    RenderScenePanel();
    ImGui::EndChild();

    // Left panel resize handle
    ImGui::SameLine();
    ImGui::SetCursorPosX(contentPos.x + leftPanelWidth);
    ImGui::InvisibleButton("LeftResizer", ImVec2(5.0f, contentSize.y));
    if (ImGui::IsItemHovered())
        ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeEW);
    if (ImGui::IsItemActive() || resizingLeftPanel)
    {
        resizingLeftPanel = ImGui::IsMouseDown(ImGuiMouseButton_Left);
        if (resizingLeftPanel)
        {
            float newWidth = ImGui::GetIO().MousePos.x - contentPos.x;
            // Clamp to reasonable values
            if (newWidth > 100.0f && newWidth < contentSize.x - rightPanelWidth - 100.0f)
                leftPanelWidth = newWidth;
        }
    }

    // Middle panel (Editor)
    ImGui::SameLine();
    ImGui::BeginChild("MiddlePanel", ImVec2(contentSize.x - leftPanelWidth - rightPanelWidth - 10.0f, contentSize.y), true);
    RenderEditorPanel();
    ImGui::EndChild();

    // Right panel resize handle
    ImGui::SameLine();
    ImGui::SetCursorPosX(contentPos.x + contentSize.x - rightPanelWidth - 5.0f);
    ImGui::InvisibleButton("RightResizer", ImVec2(5.0f, contentSize.y));
    if (ImGui::IsItemHovered())
        ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeEW);
    if (ImGui::IsItemActive() || resizingRightPanel)
    {
        resizingRightPanel = ImGui::IsMouseDown(ImGuiMouseButton_Left);
        if (resizingRightPanel)
        {
            float newWidth = contentPos.x + contentSize.x - ImGui::GetIO().MousePos.x;
            // Clamp to reasonable values
            if (newWidth > 100.0f && newWidth < contentSize.x - leftPanelWidth - 100.0f)
                rightPanelWidth = newWidth;
        }
    }

    // Right panel (Inspector)
    ImGui::SameLine();
    ImGui::BeginChild("RightPanel", ImVec2(rightPanelWidth, contentSize.y), true);
    RenderInspectorPanel();
    ImGui::EndChild();

    ImGui::End(); // DockSpace

    // Show ImGui demo window if enabled
    if (showDemoWindow)
    {
        ImGui::ShowDemoWindow(&showDemoWindow);
    }

    ImGui::PopFont();
}

void EngineUI::RenderTopBar()
{
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            if (ImGui::MenuItem("New Scene", "Ctrl+N"))
            {
            }
            if (ImGui::MenuItem("Open Scene", "Ctrl+O"))
            {
            }
            if (ImGui::MenuItem("Save Scene", "Ctrl+S"))
            {
            }
            if (ImGui::MenuItem("Save Scene As", "Ctrl+Shift+S"))
            {
            }
            ImGui::Separator();
            if (ImGui::MenuItem("Exit", "Alt+F4"))
            {
            }
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Edit"))
        {
            if (ImGui::MenuItem("Undo", "Ctrl+Z"))
            {
            }
            if (ImGui::MenuItem("Redo", "Ctrl+Y"))
            {
            }
            ImGui::Separator();
            if (ImGui::MenuItem("Cut", "Ctrl+X"))
            {
            }
            if (ImGui::MenuItem("Copy", "Ctrl+C"))
            {
            }
            if (ImGui::MenuItem("Paste", "Ctrl+V"))
            {
            }
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("View"))
        {
            if (ImGui::MenuItem("Toggle ImGui Demo", nullptr, &showDemoWindow))
            {
            }
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Project"))
        {
            if (ImGui::MenuItem("Project Settings"))
            {
            }
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Help"))
        {
            if (ImGui::MenuItem("Documentation"))
            {
            }
            if (ImGui::MenuItem("About"))
            {
            }
            ImGui::EndMenu();
        }

        ImGui::EndMenuBar();
    }
}

void EngineUI::RenderScenePanel()
{
    ImGui::PushFont(titleFont);
    ImGui::Text("Scene");
    ImGui::PopFont();

    // Add node button
    ImGui::SameLine(ImGui::GetContentRegionAvail().x - 60);
    if (ImGui::Button("+ Node"))
    {
        ImGui::OpenPopup("AddNodePopup");
    }

    if (ImGui::BeginPopup("AddNodePopup"))
    {
        if (ImGui::MenuItem("Node2D"))
            AddChildNode(rootNode, "Node2D", NodeType::Node2D);
        if (ImGui::MenuItem("Sprite"))
            AddChildNode(rootNode, "Sprite", NodeType::Sprite);
        if (ImGui::MenuItem("CharacterBody2D"))
            AddChildNode(rootNode, "CharacterBody2D", NodeType::CharacterBody2D);
        if (ImGui::MenuItem("Camera"))
            AddChildNode(rootNode, "Camera", NodeType::Camera);
        if (ImGui::MenuItem("Light"))
            AddChildNode(rootNode, "Light", NodeType::Light);
        if (ImGui::MenuItem("Label"))
            AddChildNode(rootNode, "Label", NodeType::Label);
        if (ImGui::MenuItem("Button"))
            AddChildNode(rootNode, "Button", NodeType::Button);
        ImGui::EndPopup();
    }

    ImGui::Separator();

    // Render the scene hierarchy
    if (rootNode)
    {
        RenderSceneNode(rootNode);
    }
}

void EngineUI::RenderSceneNode(std::shared_ptr<SceneNode> node)
{
    if (!node)
        return;

    ImGuiTreeNodeFlags flags = ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_SpanAvailWidth;

    // Add selection flag if this node is selected
    if (node->selected)
        flags |= ImGuiTreeNodeFlags_Selected;

    // If node has no children, make it a leaf node
    if (node->children.empty())
        flags |= ImGuiTreeNodeFlags_Leaf;

    // Use node's expanded state
    if (node->expanded)
        flags |= ImGuiTreeNodeFlags_DefaultOpen;

    // Push icon font for the icon
    ImGui::PushFont(iconFont);
    std::string icon = GetNodeIcon(node->type);
    ImGui::Text("%s", icon.c_str());
    ImGui::PopFont();

    ImGui::SameLine();

    // Display the node with its name
    bool nodeOpen = ImGui::TreeNodeEx(node->name.c_str(), flags);

    // Handle selection
    if (ImGui::IsItemClicked())
    {
        // Deselect previous node
        if (selectedNode)
            selectedNode->selected = false;

        // Select this node
        node->selected = true;
        selectedNode = node;
    }

    // Context menu for node operations
    if (ImGui::BeginPopupContextItem())
    {
        RenderNodeContextMenu(node);
        ImGui::EndPopup();
    }

    // Update expanded state
    node->expanded = nodeOpen;

    // Render children if node is open
    if (nodeOpen)
    {
        for (auto &child : node->children)
        {
            RenderSceneNode(child);
        }

        ImGui::TreePop();
    }
}

void EngineUI::RenderNodeContextMenu(std::shared_ptr<SceneNode> node)
{
    if (ImGui::MenuItem("Add Child Node"))
    {
        ImGui::OpenPopup("AddChildNodePopup");
    }

    if (ImGui::BeginPopup("AddChildNodePopup"))
    {
        if (ImGui::MenuItem("Node2D"))
            AddChildNode(node, "Node2D", NodeType::Node2D);
        if (ImGui::MenuItem("Sprite"))
            AddChildNode(node, "Sprite", NodeType::Sprite);
        if (ImGui::MenuItem("CharacterBody2D"))
            AddChildNode(node, "CharacterBody2D", NodeType::CharacterBody2D);
        if (ImGui::MenuItem("Camera"))
            AddChildNode(node, "Camera", NodeType::Camera);
        if (ImGui::MenuItem("Light"))
            AddChildNode(node, "Light", NodeType::Light);
        if (ImGui::MenuItem("Label"))
            AddChildNode(node, "Label", NodeType::Label);
        if (ImGui::MenuItem("Button"))
            AddChildNode(node, "Button", NodeType::Button);
        ImGui::EndPopup();
    }

    if (ImGui::MenuItem("Delete Node"))
    {
        // TODO: Implement node deletion
    }

    if (ImGui::MenuItem("Rename"))
    {
        // TODO: Implement node renaming
    }
}

void EngineUI::AddChildNode(std::shared_ptr<SceneNode> parent, const std::string &name, NodeType type)
{
    if (!parent)
        return;

    // Create a new node
    auto newNode = std::make_shared<SceneNode>(name, type);

    // Add it to the parent's children
    parent->children.push_back(newNode);

    // Expand the parent to show the new child
    parent->expanded = true;
}

void EngineUI::RenderEditorPanel()
{
    ImGui::PushFont(titleFont);
    ImGui::Text("Editor");
    ImGui::SameLine(ImGui::GetContentRegionAvail().x - 100);
    RenderModeToggle();
    ImGui::PopFont();
    ImGui::Separator();

    // Render the appropriate editor based on the current mode
    if (is3DMode)
    {
        Render3DEditor();
    }
    else
    {
        Render2DEditor();
    }
}

void EngineUI::RenderModeToggle()
{
    // Create a toggle button for 2D/3D mode
    ImGui::PushStyleColor(ImGuiCol_Button, is3DMode ? ImVec4(0.2f, 0.4f, 0.8f, 0.8f) : ImVec4(0.8f, 0.2f, 0.2f, 0.8f));
    ImGui::PushStyleColor(ImGuiCol_ButtonHovered, is3DMode ? ImVec4(0.3f, 0.5f, 0.9f, 1.0f) : ImVec4(0.9f, 0.3f, 0.3f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_ButtonActive, is3DMode ? ImVec4(0.4f, 0.6f, 1.0f, 1.0f) : ImVec4(1.0f, 0.4f, 0.4f, 1.0f));

    if (ImGui::Button(is3DMode ? "3D Mode" : "2D Mode", ImVec2(100, 0)))
    {
        ToggleEditorMode();
    }

    ImGui::PopStyleColor(3);

    // Show tooltip on hover
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::Text("Click to switch to %s mode", is3DMode ? "2D" : "3D");
        ImGui::EndTooltip();
    }
}

void EngineUI::ToggleEditorMode()
{
    is3DMode = !is3DMode;
    // Additional mode switching logic could be added here
}

void EngineUI::Render2DEditor()
{
    // Editor viewport
    ImVec2 viewportSize = ImGui::GetContentRegionAvail();
    ImGui::Text("2D Viewport Size: %.0f x %.0f", viewportSize.x, viewportSize.y);

    // Draw a placeholder for the viewport
    ImGui::GetWindowDrawList()->AddRectFilled(
        ImGui::GetCursorScreenPos(),
        ImVec2(ImGui::GetCursorScreenPos().x + viewportSize.x, ImGui::GetCursorScreenPos().y + viewportSize.y),
        IM_COL32(50, 50, 50, 255));

    // Draw a grid in the viewport
    ImDrawList *drawList = ImGui::GetWindowDrawList();
    ImVec2 startPos = ImGui::GetCursorScreenPos();

    // Grid settings
    float gridSize = 20.0f;
    ImU32 gridColor = IM_COL32(100, 100, 100, 40);

    // Draw horizontal grid lines
    for (float y = 0; y < viewportSize.y; y += gridSize)
    {
        drawList->AddLine(
            ImVec2(startPos.x, startPos.y + y),
            ImVec2(startPos.x + viewportSize.x, startPos.y + y),
            gridColor);
    }

    // Draw vertical grid lines
    for (float x = 0; x < viewportSize.x; x += gridSize)
    {
        drawList->AddLine(
            ImVec2(startPos.x + x, startPos.y),
            ImVec2(startPos.x + x, startPos.y + viewportSize.y),
            gridColor);
    }

    // Draw origin lines (x and y axes)
    float centerX = startPos.x + viewportSize.x / 2;
    float centerY = startPos.y + viewportSize.y / 2;

    drawList->AddLine(
        ImVec2(centerX, startPos.y),
        ImVec2(centerX, startPos.y + viewportSize.y),
        IM_COL32(255, 0, 0, 100), 2.0f);

    drawList->AddLine(
        ImVec2(startPos.x, centerY),
        ImVec2(startPos.x + viewportSize.x, centerY),
        IM_COL32(0, 255, 0, 100), 2.0f);

    // Make the viewport area interactive
    ImGui::InvisibleButton("viewport2d", viewportSize);
}

void EngineUI::Render3DEditor()
{
    // Editor viewport
    ImVec2 viewportSize = ImGui::GetContentRegionAvail();
    ImGui::Text("3D Viewport Size: %.0f x %.0f", viewportSize.x, viewportSize.y);

    // Draw a placeholder for the viewport
    ImGui::GetWindowDrawList()->AddRectFilled(
        ImGui::GetCursorScreenPos(),
        ImVec2(ImGui::GetCursorScreenPos().x + viewportSize.x, ImGui::GetCursorScreenPos().y + viewportSize.y),
        IM_COL32(30, 30, 40, 255));

    // Draw a 3D grid in the viewport
    ImDrawList *drawList = ImGui::GetWindowDrawList();
    ImVec2 startPos = ImGui::GetCursorScreenPos();

    // Grid settings
    float gridSize = 30.0f;
    ImU32 gridColor = IM_COL32(80, 80, 100, 40);

    // Center of the viewport
    float centerX = startPos.x + viewportSize.x / 2;
    float centerY = startPos.y + viewportSize.y / 2;

    // Draw 3D grid (perspective effect)
    // Horizontal lines with perspective
    for (int i = -10; i <= 10; i++)
    {
        float y = centerY + i * gridSize;
        float perspectiveScale = 0.7f + 0.3f * (float)(10 - abs(i)) / 10.0f;
        float xStart = centerX - (viewportSize.x / 2) * perspectiveScale;
        float xEnd = centerX + (viewportSize.x / 2) * perspectiveScale;

        drawList->AddLine(
            ImVec2(xStart, y),
            ImVec2(xEnd, y),
            gridColor);
    }

    // Vertical lines with perspective
    for (int i = -15; i <= 15; i++)
    {
        float x = centerX + i * gridSize;
        float perspectiveScale = 0.7f + 0.3f * (float)(15 - abs(i)) / 15.0f;
        float yStart = centerY - (viewportSize.y / 2) * perspectiveScale;
        float yEnd = centerY + (viewportSize.y / 2) * perspectiveScale;

        drawList->AddLine(
            ImVec2(x, yStart),
            ImVec2(x, yEnd),
            gridColor);
    }

    // Draw 3D axes
    // X axis (red)
    drawList->AddLine(
        ImVec2(centerX, centerY),
        ImVec2(centerX + viewportSize.x / 3, centerY),
        IM_COL32(255, 50, 50, 200), 2.0f);

    // Y axis (green)
    drawList->AddLine(
        ImVec2(centerX, centerY),
        ImVec2(centerX, centerY - viewportSize.y / 3),
        IM_COL32(50, 255, 50, 200), 2.0f);

    // Z axis (blue) - coming toward the viewer
    drawList->AddLine(
        ImVec2(centerX, centerY),
        ImVec2(centerX - viewportSize.x / 6, centerY + viewportSize.y / 6),
        IM_COL32(50, 50, 255, 200), 2.0f);

    // Draw axis labels directly with the draw list instead of using ImGui::Text
    // This avoids issues with cursor positioning
    ImGui::GetWindowDrawList()->AddText(
        ImVec2(centerX + viewportSize.x / 3 + 5, centerY),
        IM_COL32(255, 50, 50, 255), "X");

    ImGui::GetWindowDrawList()->AddText(
        ImVec2(centerX, centerY - viewportSize.y / 3 - 15),
        IM_COL32(50, 255, 50, 255), "Y");

    ImGui::GetWindowDrawList()->AddText(
        ImVec2(centerX - viewportSize.x / 6 - 15, centerY + viewportSize.y / 6 + 5),
        IM_COL32(50, 50, 255, 255), "Z");

    // Make the viewport area interactive
    ImGui::InvisibleButton("viewport3d", viewportSize);
}

void EngineUI::RenderInspectorPanel()
{
    ImGui::PushFont(titleFont);
    ImGui::Text("Inspector");
    ImGui::PopFont();
    ImGui::Separator();

    // If no node is selected, show a message
    if (!selectedNode)
    {
        ImGui::TextWrapped("Select a node to edit its properties");
        return;
    }

    // Show node type with icon
    ImGui::PushFont(iconFont);
    ImGui::Text("%s", GetNodeIcon(selectedNode->type));
    ImGui::PopFont();
    ImGui::SameLine();
    ImGui::Text("%s (%s)", selectedNode->name.c_str(),
                selectedNode->type == NodeType::Root ? "Root" : selectedNode->type == NodeType::Node2D        ? "Node2D"
                                                            : selectedNode->type == NodeType::Sprite          ? "Sprite"
                                                            : selectedNode->type == NodeType::CharacterBody2D ? "CharacterBody2D"
                                                            : selectedNode->type == NodeType::Camera          ? "Camera"
                                                            : selectedNode->type == NodeType::Light           ? "Light"
                                                            : selectedNode->type == NodeType::Label           ? "Label"
                                                            : selectedNode->type == NodeType::Button          ? "Button"
                                                            : selectedNode->type == NodeType::Panel           ? "Panel"
                                                                                                              : "Unknown");

    ImGui::Separator();

    // Properties section
    ImGui::PushFont(boldFont);
    ImGui::Text("Transform");
    ImGui::PopFont();

    // Position
    static float position[3] = {0.0f, 0.0f, 0.0f};
    ImGui::Text("Position");
    ImGui::SameLine(100);
    ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
    ImGui::InputFloat3("##Position", position);
    ImGui::PopItemWidth();

    // Rotation
    static float rotation[3] = {0.0f, 0.0f, 0.0f};
    ImGui::Text("Rotation");
    ImGui::SameLine(100);
    ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
    ImGui::InputFloat3("##Rotation", rotation);
    ImGui::PopItemWidth();

    // Scale
    static float scale[3] = {1.0f, 1.0f, 1.0f};
    ImGui::Text("Scale");
    ImGui::SameLine(100);
    ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
    ImGui::InputFloat3("##Scale", scale);
    ImGui::PopItemWidth();

    ImGui::Separator();

    // Node-specific properties
    switch (selectedNode->type)
    {
    case NodeType::Sprite:
    {
        ImGui::PushFont(boldFont);
        ImGui::Text("Sprite Properties");
        ImGui::PopFont();

        // Texture
        ImGui::Text("Texture");
        ImGui::SameLine(100);
        ImGui::Button("Select Texture", ImVec2(ImGui::GetContentRegionAvail().x, 0));

        // Color
        static float color[4] = {1.0f, 1.0f, 1.0f, 1.0f};
        ImGui::Text("Color");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::ColorEdit4("##Color", color);
        ImGui::PopItemWidth();
        break;
    }

    case NodeType::CharacterBody2D:
    {
        ImGui::PushFont(boldFont);
        ImGui::Text("CharacterBody2D Properties");
        ImGui::PopFont();

        // Speed
        static float speed = 200.0f;
        ImGui::Text("Speed");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::SliderFloat("##Speed", &speed, 0.0f, 500.0f, "%.1f");
        ImGui::PopItemWidth();

        // Jump Height
        static float jumpHeight = 50.0f;
        ImGui::Text("Jump Height");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::SliderFloat("##JumpHeight", &jumpHeight, 0.0f, 200.0f, "%.1f");
        ImGui::PopItemWidth();

        // Gravity
        static float gravity = 9.8f;
        ImGui::Text("Gravity");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::SliderFloat("##Gravity", &gravity, 0.0f, 20.0f, "%.1f");
        ImGui::PopItemWidth();
        break;
    }

    case NodeType::Camera:
    {
        ImGui::PushFont(boldFont);
        ImGui::Text("Camera Properties");
        ImGui::PopFont();

        // Zoom
        static float zoom = 1.0f;
        ImGui::Text("Zoom");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::SliderFloat("##Zoom", &zoom, 0.1f, 10.0f, "%.2f");
        ImGui::PopItemWidth();

        // Current
        static bool current = true;
        ImGui::Text("Current");
        ImGui::SameLine(100);
        ImGui::Checkbox("##Current", &current);
        break;
    }

    case NodeType::Label:
    {
        ImGui::PushFont(boldFont);
        ImGui::Text("Label Properties");
        ImGui::PopFont();

        // Text
        static char text[256] = "Label Text";
        ImGui::Text("Text");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::InputText("##Text", text, IM_ARRAYSIZE(text));
        ImGui::PopItemWidth();

        // Font Size
        static int fontSize = 16;
        ImGui::Text("Font Size");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::SliderInt("##FontSize", &fontSize, 8, 72);
        ImGui::PopItemWidth();

        // Color
        static float textColor[4] = {1.0f, 1.0f, 1.0f, 1.0f};
        ImGui::Text("Color");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::ColorEdit4("##TextColor", textColor);
        ImGui::PopItemWidth();
        break;
    }

    case NodeType::Button:
    {
        ImGui::PushFont(boldFont);
        ImGui::Text("Button Properties");
        ImGui::PopFont();

        // Text
        static char buttonText[256] = "Button";
        ImGui::Text("Text");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::InputText("##ButtonText", buttonText, IM_ARRAYSIZE(buttonText));
        ImGui::PopItemWidth();

        // Size
        static float buttonSize[2] = {100.0f, 30.0f};
        ImGui::Text("Size");
        ImGui::SameLine(100);
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x);
        ImGui::InputFloat2("##ButtonSize", buttonSize);
        ImGui::PopItemWidth();
        break;
    }

    default:
        // No specific properties for other node types
        break;
    }
}